const A={context:void 0,registry:void 0,effects:void 0,done:!1,getContextId(){return Rt(this.context.count)},getNextContextId(){return Rt(this.context.count++)}};function Rt(e){const t=String(e),n=t.length-1;return A.context.id+(n?String.fromCharCode(96+n):"")+t}function je(e){A.context=e}const vr=!1,$r=(e,t)=>e===t,Re={equals:$r};let ye=null,Sr=Cn;const q=1,we=2,Tn={owned:null,cleanups:null,context:null,owner:null};var m=null;let h=null,Tr=null,T=null,L=null,j=null,Ne=0;function ft(e,t){const n=T,r=m,o=e.length===0,s=t===void 0?r:t,i=o?Tn:{owned:null,cleanups:null,context:s?s.context:null,owner:s},a=o?e:()=>e(()=>N(()=>J(i)));m=i,T=null;try{return H(a,!0)}finally{T=n,m=r}}function K(e,t){t=t?Object.assign({},Re,t):Re;const n={value:e,observers:null,observerSlots:null,comparator:t.equals||void 0},r=o=>(typeof o=="function"&&(h&&h.running&&h.sources.has(n)?o=o(n.tValue):o=o(n.value)),_n(n,o));return[En.bind(n),r]}function W(e,t,n){const r=pt(e,t,!1,q);Be(r)}function x(e,t,n){n=n?Object.assign({},Re,n):Re;const r=pt(e,t,!0,0);return r.observers=null,r.observerSlots=null,r.comparator=n.equals||void 0,Be(r),En.bind(r)}function Ar(e){return H(e,!1)}function N(e){if(T===null)return e();const t=T;T=null;try{return e()}finally{T=t}}function dt(e,t,n){const r=Array.isArray(e);let o,s=n&&n.defer;return i=>{let a;if(r){a=Array(e.length);for(let l=0;l<e.length;l++)a[l]=e[l]()}else a=e();if(s)return s=!1,i;const c=N(()=>t(a,o,i));return o=a,c}}function Te(e){return m===null||(m.cleanups===null?m.cleanups=[e]:m.cleanups.push(e)),e}function Pr(e,t){ye||(ye=Symbol("error")),m=pt(void 0,void 0,!0),m.context={...m.context,[ye]:[t]},h&&h.running&&h.sources.add(m);try{return e()}catch(n){Pe(n)}finally{m=m.owner}}function ht(){return m}function An(e,t){const n=m,r=T;m=e,T=null;try{return H(t,!0)}catch(o){Pe(o)}finally{m=n,T=r}}function Er(e){if(h&&h.running)return e(),h.done;const t=T,n=m;return Promise.resolve().then(()=>{T=t,m=n;let r;return et&&(r=h||(h={sources:new Set,effects:[],promises:new Set,disposed:new Set,queue:new Set,running:!0}),r.done||(r.done=new Promise(o=>r.resolve=o)),r.running=!0),H(e,!1),T=m=null,r?r.done:void 0})}const[Fl,Ut]=K(!1);function _r(e){j.push.apply(j,e),e.length=0}function Ae(e,t){const n=Symbol("context");return{id:n,Provider:jr(n),defaultValue:e}}function gt(e){let t;return m&&m.context&&(t=m.context[e.id])!==void 0?t:e.defaultValue}function Pn(e){const t=x(e),n=x(()=>tt(t()));return n.toArray=()=>{const r=n();return Array.isArray(r)?r:r!=null?[r]:[]},n}let et;function xr(){return et||(et=Ae())}function En(){const e=h&&h.running;if(this.sources&&(e?this.tState:this.state))if((e?this.tState:this.state)===q)Be(this);else{const t=L;L=null,H(()=>Ue(this),!1),L=t}if(T){const t=this.observers?this.observers.length:0;T.sources?(T.sources.push(this),T.sourceSlots.push(t)):(T.sources=[this],T.sourceSlots=[t]),this.observers?(this.observers.push(T),this.observerSlots.push(T.sources.length-1)):(this.observers=[T],this.observerSlots=[T.sources.length-1])}return e&&h.sources.has(this)?this.tValue:this.value}function _n(e,t,n){let r=h&&h.running&&h.sources.has(e)?e.tValue:e.value;if(!e.comparator||!e.comparator(r,t)){if(h){const o=h.running;(o||!n&&h.sources.has(e))&&(h.sources.add(e),e.tValue=t),o||(e.value=t)}else e.value=t;e.observers&&e.observers.length&&H(()=>{for(let o=0;o<e.observers.length;o+=1){const s=e.observers[o],i=h&&h.running;i&&h.disposed.has(s)||((i?!s.tState:!s.state)&&(s.pure?L.push(s):j.push(s),s.observers&&On(s)),i?s.tState=q:s.state=q)}if(L.length>1e6)throw L=[],new Error},!1)}return t}function Be(e){if(!e.fn)return;J(e);const t=Ne;Ft(e,h&&h.running&&h.sources.has(e)?e.tValue:e.value,t),h&&!h.running&&h.sources.has(e)&&queueMicrotask(()=>{H(()=>{h&&(h.running=!0),T=m=e,Ft(e,e.tValue,t),T=m=null},!1)})}function Ft(e,t,n){let r;const o=m,s=T;T=m=e;try{r=e.fn(t)}catch(i){return e.pure&&(h&&h.running?(e.tState=q,e.tOwned&&e.tOwned.forEach(J),e.tOwned=void 0):(e.state=q,e.owned&&e.owned.forEach(J),e.owned=null)),e.updatedAt=n+1,Pe(i)}finally{T=s,m=o}(!e.updatedAt||e.updatedAt<=n)&&(e.updatedAt!=null&&"observers"in e?_n(e,r,!0):h&&h.running&&e.pure?(h.sources.add(e),e.tValue=r):e.value=r,e.updatedAt=n)}function pt(e,t,n,r=q,o){const s={fn:e,state:r,updatedAt:null,owned:null,sources:null,sourceSlots:null,cleanups:null,value:t,owner:m,context:m?m.context:null,pure:n};return h&&h.running&&(s.state=0,s.tState=r),m===null||m!==Tn&&(h&&h.running&&m.pure?m.tOwned?m.tOwned.push(s):m.tOwned=[s]:m.owned?m.owned.push(s):m.owned=[s]),s}function xn(e){const t=h&&h.running;if((t?e.tState:e.state)===0)return;if((t?e.tState:e.state)===we)return Ue(e);if(e.suspense&&N(e.suspense.inFallback))return e.suspense.effects.push(e);const n=[e];for(;(e=e.owner)&&(!e.updatedAt||e.updatedAt<Ne);){if(t&&h.disposed.has(e))return;(t?e.tState:e.state)&&n.push(e)}for(let r=n.length-1;r>=0;r--){if(e=n[r],t){let o=e,s=n[r+1];for(;(o=o.owner)&&o!==s;)if(h.disposed.has(o))return}if((t?e.tState:e.state)===q)Be(e);else if((t?e.tState:e.state)===we){const o=L;L=null,H(()=>Ue(e,n[0]),!1),L=o}}}function H(e,t){if(L)return e();let n=!1;t||(L=[]),j?n=!0:j=[],Ne++;try{const r=e();return Cr(n),r}catch(r){n||(j=null),L=null,Pe(r)}}function Cr(e){if(L&&(Cn(L),L=null),e)return;let t;if(h){if(!h.promises.size&&!h.queue.size){const r=h.sources,o=h.disposed;j.push.apply(j,h.effects),t=h.resolve;for(const s of j)"tState"in s&&(s.state=s.tState),delete s.tState;h=null,H(()=>{for(const s of o)J(s);for(const s of r){if(s.value=s.tValue,s.owned)for(let i=0,a=s.owned.length;i<a;i++)J(s.owned[i]);s.tOwned&&(s.owned=s.tOwned),delete s.tValue,delete s.tOwned,s.tState=0}Ut(!1)},!1)}else if(h.running){h.running=!1,h.effects.push.apply(h.effects,j),j=null,Ut(!0);return}}const n=j;j=null,n.length&&H(()=>Sr(n),!1),t&&t()}function Cn(e){for(let t=0;t<e.length;t++)xn(e[t])}function Ue(e,t){const n=h&&h.running;n?e.tState=0:e.state=0;for(let r=0;r<e.sources.length;r+=1){const o=e.sources[r];if(o.sources){const s=n?o.tState:o.state;s===q?o!==t&&(!o.updatedAt||o.updatedAt<Ne)&&xn(o):s===we&&Ue(o,t)}}}function On(e){const t=h&&h.running;for(let n=0;n<e.observers.length;n+=1){const r=e.observers[n];(t?!r.tState:!r.state)&&(t?r.tState=we:r.state=we,r.pure?L.push(r):j.push(r),r.observers&&On(r))}}function J(e){let t;if(e.sources)for(;e.sources.length;){const n=e.sources.pop(),r=e.sourceSlots.pop(),o=n.observers;if(o&&o.length){const s=o.pop(),i=n.observerSlots.pop();r<o.length&&(s.sourceSlots[i]=r,o[r]=s,n.observerSlots[r]=i)}}if(e.tOwned){for(t=e.tOwned.length-1;t>=0;t--)J(e.tOwned[t]);delete e.tOwned}if(h&&h.running&&e.pure)jn(e,!0);else if(e.owned){for(t=e.owned.length-1;t>=0;t--)J(e.owned[t]);e.owned=null}if(e.cleanups){for(t=e.cleanups.length-1;t>=0;t--)e.cleanups[t]();e.cleanups=null}h&&h.running?e.tState=0:e.state=0}function jn(e,t){if(t||(e.tState=0,h.disposed.add(e)),e.owned)for(let n=0;n<e.owned.length;n++)jn(e.owned[n])}function Or(e){return e instanceof Error?e:new Error(typeof e=="string"?e:"Unknown error",{cause:e})}function Mt(e,t,n){try{for(const r of t)r(e)}catch(r){Pe(r,n&&n.owner||null)}}function Pe(e,t=m){const n=ye&&t&&t.context&&t.context[ye],r=Or(e);if(!n)throw r;j?j.push({fn(){Mt(r,n,t)},state:q}):Mt(r,n,t)}function tt(e){if(typeof e=="function"&&!e.length)return tt(e());if(Array.isArray(e)){const t=[];for(let n=0;n<e.length;n++){const r=tt(e[n]);Array.isArray(r)?t.push.apply(t,r):t.push(r)}return t}return e}function jr(e,t){return function(r){let o;return W(()=>o=N(()=>(m.context={...m.context,[e]:r.value},Pn(()=>r.children))),void 0),o}}function _(e,t){return N(()=>e(t||{}))}let Lr=0;function Ir(){return A.context?A.getNextContextId():`cl-${Lr++}`}const Rr=e=>`Stale read from <${e}>.`;function Ln(e){const t=e.keyed,n=x(()=>e.when,void 0,void 0),r=t?n:x(n,void 0,{equals:(o,s)=>!o==!s});return x(()=>{const o=r();if(o){const s=e.children;return typeof s=="function"&&s.length>0?N(()=>s(t?o:()=>{if(!N(r))throw Rr("Show");return n()})):s}return e.fallback},void 0,void 0)}let ue;function Ur(){ue&&[...ue].forEach(e=>e())}function Fr(e){let t;A.context&&A.load&&(t=A.load(A.getContextId()));const[n,r]=K(t,void 0);return ue||(ue=new Set),ue.add(r),Te(()=>ue.delete(r)),x(()=>{let o;if(o=n()){const s=e.fallback;return typeof s=="function"&&s.length?N(()=>s(o,()=>r())):s}return Pr(()=>e.children,r)},void 0,void 0)}const Mr=Ae();function Nr(e){let t=0,n,r,o,s,i;const[a,c]=K(!1),l=xr(),u={increment:()=>{++t===1&&c(!0)},decrement:()=>{--t===0&&c(!1)},inFallback:a,effects:[],resolved:!1},f=ht();if(A.context&&A.load){const w=A.getContextId();let p=A.load(w);if(p&&(typeof p!="object"||p.status!=="success"?o=p:A.gather(w)),o&&o!=="$$f"){const[g,b]=K(void 0,{equals:!1});s=g,o.then(()=>{if(A.done)return b();A.gather(w),je(r),b(),je()},S=>{i=S,b()})}}const d=gt(Mr);d&&(n=d.register(u.inFallback));let y;return Te(()=>y&&y()),_(l.Provider,{value:u,get children(){return x(()=>{if(i)throw i;if(r=A.context,s)return s(),s=void 0;r&&o==="$$f"&&je();const w=x(()=>e.children);return x(p=>{const g=u.inFallback(),{showContent:b=!0,showFallback:S=!0}=n?n():{};if((!g||o&&o!=="$$f")&&b)return u.resolved=!0,y&&y(),y=r=o=void 0,_r(u.effects),w();if(S)return y?p:ft(I=>(y=I,r&&(je({id:r.id+"F",count:0}),r=void 0),e.fallback),f)})})}})}const Br=["allowfullscreen","async","autofocus","autoplay","checked","controls","default","disabled","formnovalidate","hidden","indeterminate","inert","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","seamless","selected"],kr=new Set(["className","value","readOnly","formNoValidate","isMap","noModule","playsInline",...Br]),Dr=new Set(["innerHTML","textContent","innerText","children"]),Vr=Object.assign(Object.create(null),{className:"class",htmlFor:"for"}),qr=Object.assign(Object.create(null),{class:"className",formnovalidate:{$:"formNoValidate",BUTTON:1,INPUT:1},ismap:{$:"isMap",IMG:1},nomodule:{$:"noModule",SCRIPT:1},playsinline:{$:"playsInline",VIDEO:1},readonly:{$:"readOnly",INPUT:1,TEXTAREA:1}});function Hr(e,t){const n=qr[e];return typeof n=="object"?n[t]?n.$:void 0:n}const zr=new Set(["beforeinput","click","dblclick","contextmenu","focusin","focusout","input","keydown","keyup","mousedown","mousemove","mouseout","mouseover","mouseup","pointerdown","pointermove","pointerout","pointerover","pointerup","touchend","touchmove","touchstart"]);function Gr(e,t,n){let r=n.length,o=t.length,s=r,i=0,a=0,c=t[o-1].nextSibling,l=null;for(;i<o||a<s;){if(t[i]===n[a]){i++,a++;continue}for(;t[o-1]===n[s-1];)o--,s--;if(o===i){const u=s<r?a?n[a-1].nextSibling:n[s-a]:c;for(;a<s;)e.insertBefore(n[a++],u)}else if(s===a)for(;i<o;)(!l||!l.has(t[i]))&&t[i].remove(),i++;else if(t[i]===n[s-1]&&n[a]===t[o-1]){const u=t[--o].nextSibling;e.insertBefore(n[a++],t[i++].nextSibling),e.insertBefore(n[--s],u),t[o]=n[s]}else{if(!l){l=new Map;let f=a;for(;f<s;)l.set(n[f],f++)}const u=l.get(t[i]);if(u!=null)if(a<u&&u<s){let f=i,d=1,y;for(;++f<o&&f<s&&!((y=l.get(t[f]))==null||y!==u+d);)d++;if(d>u-a){const w=t[i];for(;a<u;)e.insertBefore(n[a++],w)}else e.replaceChild(n[a++],t[i++])}else i++;else t[i++].remove()}}}const Nt="_$DX_DELEGATE";function In(e,t,n,r={}){let o;return ft(s=>{o=s,t===document?e():De(t,e(),t.firstChild?null:void 0,n)},r.owner),()=>{o(),t.textContent=""}}function Ee(e,t,n,r){let o;const s=()=>{const a=document.createElement("template");return a.innerHTML=e,a.content.firstChild},i=()=>(o||(o=s())).cloneNode(!0);return i.cloneNode=i,i}function yt(e,t=window.document){const n=t[Nt]||(t[Nt]=new Set);for(let r=0,o=e.length;r<o;r++){const s=e[r];n.has(s)||(n.add(s),t.addEventListener(s,eo))}}function nt(e,t,n){_e(e)||(n==null?e.removeAttribute(t):e.setAttribute(t,n))}function Kr(e,t,n){_e(e)||(n?e.setAttribute(t,""):e.removeAttribute(t))}function ke(e,t){_e(e)||(t==null?e.removeAttribute("class"):e.className=t)}function Wr(e,t,n,r){if(r)Array.isArray(n)?(e[`$$${t}`]=n[0],e[`$$${t}Data`]=n[1]):e[`$$${t}`]=n;else if(Array.isArray(n)){const o=n[0];e.addEventListener(t,n[0]=s=>o.call(e,n[1],s))}else e.addEventListener(t,n,typeof n!="function"&&n)}function Xr(e,t,n={}){const r=Object.keys(t||{}),o=Object.keys(n);let s,i;for(s=0,i=o.length;s<i;s++){const a=o[s];!a||a==="undefined"||t[a]||(kt(e,a,!1),delete n[a])}for(s=0,i=r.length;s<i;s++){const a=r[s],c=!!t[a];!a||a==="undefined"||n[a]===c||!c||(kt(e,a,!0),n[a]=c)}return n}function Jr(e,t,n){if(!t)return n?nt(e,"style"):t;const r=e.style;if(typeof t=="string")return r.cssText=t;typeof n=="string"&&(r.cssText=n=void 0),n||(n={}),t||(t={});let o,s;for(s in n)t[s]==null&&r.removeProperty(s),delete n[s];for(s in t)o=t[s],o!==n[s]&&(r.setProperty(s,o),n[s]=o);return n}function Bt(e,t={},n,r){const o={};return W(()=>o.children=ve(e,t.children,o.children)),W(()=>typeof t.ref=="function"&&Zr(t.ref,e)),W(()=>Yr(e,t,n,!0,o,!0)),o}function Zr(e,t,n){return N(()=>e(t,n))}function De(e,t,n,r){if(n!==void 0&&!r&&(r=[]),typeof t!="function")return ve(e,t,r,n);W(o=>ve(e,t(),o,n),r)}function Yr(e,t,n,r,o={},s=!1){t||(t={});for(const i in o)if(!(i in t)){if(i==="children")continue;o[i]=Dt(e,i,null,o[i],n,s,t)}for(const i in t){if(i==="children")continue;const a=t[i];o[i]=Dt(e,i,a,o[i],n,s,t)}}function _e(e){return!!A.context&&!A.done&&(!e||e.isConnected)}function Qr(e){return e.toLowerCase().replace(/-([a-z])/g,(t,n)=>n.toUpperCase())}function kt(e,t,n){const r=t.trim().split(/\s+/);for(let o=0,s=r.length;o<s;o++)e.classList.toggle(r[o],n)}function Dt(e,t,n,r,o,s,i){let a,c,l,u,f;if(t==="style")return Jr(e,n,r);if(t==="classList")return Xr(e,n,r);if(n===r)return r;if(t==="ref")s||n(e);else if(t.slice(0,3)==="on:"){const d=t.slice(3);r&&e.removeEventListener(d,r,typeof r!="function"&&r),n&&e.addEventListener(d,n,typeof n!="function"&&n)}else if(t.slice(0,10)==="oncapture:"){const d=t.slice(10);r&&e.removeEventListener(d,r,!0),n&&e.addEventListener(d,n,!0)}else if(t.slice(0,2)==="on"){const d=t.slice(2).toLowerCase(),y=zr.has(d);if(!y&&r){const w=Array.isArray(r)?r[0]:r;e.removeEventListener(d,w)}(y||n)&&(Wr(e,d,n,y),y&&yt([d]))}else if(t.slice(0,5)==="attr:")nt(e,t.slice(5),n);else if(t.slice(0,5)==="bool:")Kr(e,t.slice(5),n);else if((f=t.slice(0,5)==="prop:")||(l=Dr.has(t))||(u=Hr(t,e.tagName))||(c=kr.has(t))||(a=e.nodeName.includes("-")||"is"in i)){if(f)t=t.slice(5),c=!0;else if(_e(e))return n;t==="class"||t==="className"?ke(e,n):a&&!c&&!l?e[Qr(t)]=n:e[u||t]=n}else nt(e,Vr[t]||t,n);return n}function eo(e){if(A.registry&&A.events&&A.events.find(([c,l])=>l===e))return;let t=e.target;const n=`$$${e.type}`,r=e.target,o=e.currentTarget,s=c=>Object.defineProperty(e,"target",{configurable:!0,value:c}),i=()=>{const c=t[n];if(c&&!t.disabled){const l=t[`${n}Data`];if(l!==void 0?c.call(t,l,e):c.call(t,e),e.cancelBubble)return}return t.host&&typeof t.host!="string"&&!t.host._$host&&t.contains(e.target)&&s(t.host),!0},a=()=>{for(;i()&&(t=t._$host||t.parentNode||t.host););};if(Object.defineProperty(e,"currentTarget",{configurable:!0,get(){return t||document}}),A.registry&&!A.done&&(A.done=_$HY.done=!0),e.composedPath){const c=e.composedPath();s(c[0]);for(let l=0;l<c.length-2&&(t=c[l],!!i());l++){if(t._$host){t=t._$host,a();break}if(t.parentNode===o)break}}else a();s(r)}function ve(e,t,n,r,o){const s=_e(e);if(s){!n&&(n=[...e.childNodes]);let c=[];for(let l=0;l<n.length;l++){const u=n[l];u.nodeType===8&&u.data.slice(0,2)==="!$"?u.remove():c.push(u)}n=c}for(;typeof n=="function";)n=n();if(t===n)return n;const i=typeof t,a=r!==void 0;if(e=a&&n[0]&&n[0].parentNode||e,i==="string"||i==="number"){if(s||i==="number"&&(t=t.toString(),t===n))return n;if(a){let c=n[0];c&&c.nodeType===3?c.data!==t&&(c.data=t):c=document.createTextNode(t),n=le(e,n,r,c)}else n!==""&&typeof n=="string"?n=e.firstChild.data=t:n=e.textContent=t}else if(t==null||i==="boolean"){if(s)return n;n=le(e,n,r)}else{if(i==="function")return W(()=>{let c=t();for(;typeof c=="function";)c=c();n=ve(e,c,n,r)}),()=>n;if(Array.isArray(t)){const c=[],l=n&&Array.isArray(n);if(rt(c,t,n,o))return W(()=>n=ve(e,c,n,r,!0)),()=>n;if(s){if(!c.length)return n;if(r===void 0)return n=[...e.childNodes];let u=c[0];if(u.parentNode!==e)return n;const f=[u];for(;(u=u.nextSibling)!==r;)f.push(u);return n=f}if(c.length===0){if(n=le(e,n,r),a)return n}else l?n.length===0?Vt(e,c,r):Gr(e,n,c):(n&&le(e),Vt(e,c));n=c}else if(t.nodeType){if(s&&t.parentNode)return n=a?[t]:t;if(Array.isArray(n)){if(a)return n=le(e,n,r,t);le(e,n,null,t)}else n==null||n===""||!e.firstChild?e.appendChild(t):e.replaceChild(t,e.firstChild);n=t}}return n}function rt(e,t,n,r){let o=!1;for(let s=0,i=t.length;s<i;s++){let a=t[s],c=n&&n[e.length],l;if(!(a==null||a===!0||a===!1))if((l=typeof a)=="object"&&a.nodeType)e.push(a);else if(Array.isArray(a))o=rt(e,a,c)||o;else if(l==="function")if(r){for(;typeof a=="function";)a=a();o=rt(e,Array.isArray(a)?a:[a],Array.isArray(c)?c:[c])||o}else e.push(a),o=!0;else{const u=String(a);c&&c.nodeType===3&&c.data===u?e.push(c):e.push(document.createTextNode(u))}}return o}function Vt(e,t,n=null){for(let r=0,o=t.length;r<o;r++)e.insertBefore(t[r],n)}function le(e,t,n,r){if(n===void 0)return e.textContent="";const o=r||document.createTextNode("");if(t.length){let s=!1;for(let i=t.length-1;i>=0;i--){const a=t[i];if(o!==a){const c=a.parentNode===e;!s&&!i?c?e.replaceChild(o,a):e.insertBefore(o,n):c&&a.remove()}else s=!0}}else e.insertBefore(o,n);return[o]}const to=!1,Ke="Invariant Violation",{setPrototypeOf:no=function(e,t){return e.__proto__=t,e}}=Object;class mt extends Error{framesToPop=1;name=Ke;constructor(t=Ke){super(typeof t=="number"?`${Ke}: ${t} (see https://github.com/apollographql/invariant-packages)`:t),no(this,mt.prototype)}}function We(e,t){if(!e)throw new mt(t)}const ro=/^[A-Za-z]:\//;function oo(e=""){return e&&e.replace(/\\/g,"/").replace(ro,t=>t.toUpperCase())}const so=/^[/\\]{2}/,io=/^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/,ao=/^[A-Za-z]:$/,co=function(e){if(e.length===0)return".";e=oo(e);const t=e.match(so),n=ot(e),r=e[e.length-1]==="/";return e=lo(e,!n),e.length===0?n?"/":r?"./":".":(r&&(e+="/"),ao.test(e)&&(e+="/"),t?n?`//${e}`:`//./${e}`:n&&!ot(e)?`/${e}`:e)},Rn=function(...e){if(e.length===0)return".";let t;for(const n of e)n&&n.length>0&&(t===void 0?t=n:t+=`/${n}`);return t===void 0?".":co(t.replace(/\/\/+/g,"/"))};function lo(e,t){let n="",r=0,o=-1,s=0,i=null;for(let a=0;a<=e.length;++a){if(a<e.length)i=e[a];else{if(i==="/")break;i="/"}if(i==="/"){if(!(o===a-1||s===1))if(s===2){if(n.length<2||r!==2||n[n.length-1]!=="."||n[n.length-2]!=="."){if(n.length>2){const c=n.lastIndexOf("/");c===-1?(n="",r=0):(n=n.slice(0,c),r=n.length-1-n.lastIndexOf("/")),o=a,s=0;continue}else if(n.length>0){n="",r=0,o=a,s=0;continue}}t&&(n+=n.length>0?"/..":"..",r=2)}else n.length>0?n+=`/${e.slice(o+1,a)}`:n=e.slice(o+1,a),r=a-o-1;o=a,s=0}else i==="."&&s!==-1?++s:s=-1}return n}const ot=function(e){return io.test(e)};function uo(e){return`virtual:${e}`}function fo(e){return e.handler?.endsWith(".html")?ot(e.handler)?e.handler:Rn(e.root,e.handler):`$vinxi/handler/${e.name}`}const ho=new Proxy({},{get(e,t){return We(typeof t=="string","Bundler name should be a string"),{name:t,type:"client",handler:uo(fo({name:t})),baseURL:"/_build",chunks:new Proxy({},{get(n,r){We(typeof r=="string","Chunk expected");let o=Rn("/_build",r+".mjs");return{import(){return import(o)},output:{path:o}}}}),inputs:new Proxy({},{get(n,r){We(typeof r=="string","Input must be string");let o=window.manifest[r].output;return{async import(){return import(o)},async assets(){return window.manifest[r].assets},output:{path:o}}}})}}});globalThis.MANIFEST=ho;const Un=Ae(),go=["title","meta"],qt=[],Ht=["name","http-equiv","content","charset","media"].concat(["property"]),zt=(e,t)=>{const n=Object.fromEntries(Object.entries(e.props).filter(([r])=>t.includes(r)).sort());return(Object.hasOwn(n,"name")||Object.hasOwn(n,"property"))&&(n.name=n.name||n.property,delete n.property),e.tag+JSON.stringify(n)};function po(){if(!A.context){const n=document.head.querySelectorAll("[data-sm]");Array.prototype.forEach.call(n,r=>r.parentNode.removeChild(r))}const e=new Map;function t(n){if(n.ref)return n.ref;let r=document.querySelector(`[data-sm="${n.id}"]`);return r?(r.tagName.toLowerCase()!==n.tag&&(r.parentNode&&r.parentNode.removeChild(r),r=document.createElement(n.tag)),r.removeAttribute("data-sm")):r=document.createElement(n.tag),r}return{addTag(n){if(go.indexOf(n.tag)!==-1){const s=n.tag==="title"?qt:Ht,i=zt(n,s);e.has(i)||e.set(i,[]);let a=e.get(i),c=a.length;a=[...a,n],e.set(i,a);let l=t(n);n.ref=l,Bt(l,n.props);let u=null;for(var r=c-1;r>=0;r--)if(a[r]!=null){u=a[r];break}return l.parentNode!=document.head&&document.head.appendChild(l),u&&u.ref&&u.ref.parentNode&&document.head.removeChild(u.ref),c}let o=t(n);return n.ref=o,Bt(o,n.props),o.parentNode!=document.head&&document.head.appendChild(o),-1},removeTag(n,r){const o=n.tag==="title"?qt:Ht,s=zt(n,o);if(n.ref){const i=e.get(s);if(i){if(n.ref.parentNode){n.ref.parentNode.removeChild(n.ref);for(let a=r-1;a>=0;a--)i[a]!=null&&document.head.appendChild(i[a].ref)}i[r]=null,e.set(s,i)}else n.ref.parentNode&&n.ref.parentNode.removeChild(n.ref)}}}}const yo=e=>{const t=po();return _(Un.Provider,{value:t,get children(){return e.children}})},Fn=(e,t,n)=>(mo({tag:e,props:t,setting:n,id:Ir(),get name(){return t.name||t.property}}),null);function mo(e){const t=gt(Un);if(!t)throw new Error("<MetaProvider /> should be in the tree");W(()=>{const n=t.addTag(e);Te(()=>t.removeTag(e,n))})}const bo=e=>Fn("title",e,{escape:!0,close:!0}),wo=e=>Fn("meta",e);function Mn(){let e=new Set;function t(o){return e.add(o),()=>e.delete(o)}let n=!1;function r(o,s){if(n)return!(n=!1);const i={to:o,options:s,defaultPrevented:!1,preventDefault:()=>i.defaultPrevented=!0};for(const a of e)a.listener({...i,from:a.location,retry:c=>{c&&(n=!0),a.navigate(o,{...s,resolve:!1})}});return!i.defaultPrevented}return{subscribe:t,confirm:r}}let st;function bt(){(!window.history.state||window.history.state._depth==null)&&window.history.replaceState({...window.history.state,_depth:window.history.length-1},""),st=window.history.state._depth}bt();function vo(e){return{...e,_depth:window.history.state&&window.history.state._depth}}function $o(e,t){let n=!1;return()=>{const r=st;bt();const o=r==null?null:st-r;if(n){n=!1;return}o&&t(o)?(n=!0,window.history.go(-o)):e()}}const So=/^(?:[a-z0-9]+:)?\/\//i,To=/^\/+|(\/)\/+$/g,Nn="http://sr";function me(e,t=!1){const n=e.replace(To,"$1");return n?t||/^[?#]/.test(n)?n:"/"+n:""}function Le(e,t,n){if(So.test(t))return;const r=me(e),o=n&&me(n);let s="";return!o||t.startsWith("/")?s=r:o.toLowerCase().indexOf(r.toLowerCase())!==0?s=r+o:s=o,(s||"/")+me(t,!s)}function Ao(e,t){return me(e).replace(/\/*(\*.*)?$/g,"")+me(t)}function Bn(e){const t={};return e.searchParams.forEach((n,r)=>{r in t?Array.isArray(t[r])?t[r].push(n):t[r]=[t[r],n]:t[r]=n}),t}function Po(e,t,n){const[r,o]=e.split("/*",2),s=r.split("/").filter(Boolean),i=s.length;return a=>{const c=a.split("/").filter(Boolean),l=c.length-i;if(l<0||l>0&&o===void 0&&!t)return null;const u={path:i?"":"/",params:{}},f=d=>n===void 0?void 0:n[d];for(let d=0;d<i;d++){const y=s[d],w=y[0]===":",p=w?c[d]:c[d].toLowerCase(),g=w?y.slice(1):y.toLowerCase();if(w&&Xe(p,f(g)))u.params[g]=p;else if(w||!Xe(p,g))return null;u.path+=`/${p}`}if(o){const d=l?c.slice(-l).join("/"):"";if(Xe(d,f(o)))u.params[o]=d;else return null}return u}}function Xe(e,t){const n=r=>r===e;return t===void 0?!0:typeof t=="string"?n(t):typeof t=="function"?t(e):Array.isArray(t)?t.some(n):t instanceof RegExp?t.test(e):!1}function Eo(e){const[t,n]=e.pattern.split("/*",2),r=t.split("/").filter(Boolean);return r.reduce((o,s)=>o+(s.startsWith(":")?2:3),r.length-(n===void 0?0:1))}function kn(e){const t=new Map,n=ht();return new Proxy({},{get(r,o){return t.has(o)||An(n,()=>t.set(o,x(()=>e()[o]))),t.get(o)()},getOwnPropertyDescriptor(){return{enumerable:!0,configurable:!0}},ownKeys(){return Reflect.ownKeys(e())}})}function Dn(e){let t=/(\/?\:[^\/]+)\?/.exec(e);if(!t)return[e];let n=e.slice(0,t.index),r=e.slice(t.index+t[0].length);const o=[n,n+=t[1]];for(;t=/^(\/\:[^\/]+)\?/.exec(r);)o.push(n+=t[1]),r=r.slice(t[0].length);return Dn(r).reduce((s,i)=>[...s,...o.map(a=>a+i)],[])}const _o=100,xo=Ae(),Vn=Ae();function Co(e,t=""){const{component:n,preload:r,load:o,children:s,info:i}=e,a=!s||Array.isArray(s)&&!s.length,c={key:e,component:n,preload:r||o,info:i};return qn(e.path).reduce((l,u)=>{for(const f of Dn(u)){const d=Ao(t,f);let y=a?d:d.split("/*",1)[0];y=y.split("/").map(w=>w.startsWith(":")||w.startsWith("*")?w:encodeURIComponent(w)).join("/"),l.push({...c,originalPath:u,pattern:y,matcher:Po(y,!a,e.matchFilters)})}return l},[])}function Oo(e,t=0){return{routes:e,score:Eo(e[e.length-1])*1e4-t,matcher(n){const r=[];for(let o=e.length-1;o>=0;o--){const s=e[o],i=s.matcher(n);if(!i)return null;r.unshift({...i,route:s})}return r}}}function qn(e){return Array.isArray(e)?e:[e]}function Hn(e,t="",n=[],r=[]){const o=qn(e);for(let s=0,i=o.length;s<i;s++){const a=o[s];if(a&&typeof a=="object"){a.hasOwnProperty("path")||(a.path="");const c=Co(a,t);for(const l of c){n.push(l);const u=Array.isArray(a.children)&&a.children.length===0;if(a.children&&!u)Hn(a.children,l.pattern,n,r);else{const f=Oo([...n],r.length);r.push(f)}n.pop()}}}return n.length?r:r.sort((s,i)=>i.score-s.score)}function Je(e,t){for(let n=0,r=e.length;n<r;n++){const o=e[n].matcher(t);if(o)return o}return[]}function jo(e,t,n){const r=new URL(Nn),o=x(u=>{const f=e();try{return new URL(f,r)}catch{return console.error(`Invalid path ${f}`),u}},r,{equals:(u,f)=>u.href===f.href}),s=x(()=>o().pathname),i=x(()=>o().search,!0),a=x(()=>o().hash),c=()=>"",l=dt(i,()=>Bn(o()));return{get pathname(){return s()},get search(){return i()},get hash(){return a()},get state(){return t()},get key(){return c()},query:n?n(l):kn(l)}}let ee;function Lo(){return ee}function Io(e,t,n,r={}){const{signal:[o,s],utils:i={}}=e,a=i.parsePath||(v=>v),c=i.renderPath||(v=>v),l=i.beforeLeave||Mn(),u=Le("",r.base||"");if(u===void 0)throw new Error(`${u} is not a valid base path`);u&&!o().value&&s({value:u,replace:!0,scroll:!1});const[f,d]=K(!1);let y;const w=(v,$)=>{$.value===p()&&$.state===b()||(y===void 0&&d(!0),ee=v,y=$,Er(()=>{y===$&&(g(y.value),S(y.state),Ur(),B[1](F=>F.filter(ae=>ae.pending)))}).finally(()=>{y===$&&Ar(()=>{ee=void 0,v==="navigate"&&D(y),d(!1),y=void 0})}))},[p,g]=K(o().value),[b,S]=K(o().state),I=jo(p,b,i.queryWrapper),R=[],B=K([]),Q=x(()=>typeof r.transformUrl=="function"?Je(t(),r.transformUrl(I.pathname)):Je(t(),I.pathname)),ie=()=>{const v=Q(),$={};for(let F=0;F<v.length;F++)Object.assign($,v[F].params);return $},C=i.paramsWrapper?i.paramsWrapper(ie,t):kn(ie),O={pattern:u,path:()=>u,outlet:()=>null,resolvePath(v){return Le(u,v)}};return W(dt(o,v=>w("native",v),{defer:!0})),{base:O,location:I,params:C,isRouting:f,renderPath:c,parsePath:a,navigatorFactory:k,matches:Q,beforeLeave:l,preloadRoute:U,singleFlight:r.singleFlight===void 0?!0:r.singleFlight,submissions:B};function M(v,$,F){N(()=>{if(typeof $=="number"){$&&(i.go?i.go($):console.warn("Router integration does not support relative routing"));return}const ae=!$||$[0]==="?",{replace:ze,resolve:ce,scroll:Ge,state:ge}={replace:!1,resolve:!ae,scroll:!0,...F},Oe=ce?v.resolvePath($):Le(ae&&I.pathname||"",$);if(Oe===void 0)throw new Error(`Path '${$}' is not a routable path`);if(R.length>=_o)throw new Error("Too many redirects");const It=p();(Oe!==It||ge!==b())&&(to||l.confirm(Oe,F)&&(R.push({value:It,replace:ze,scroll:Ge,state:b()}),w("navigate",{value:Oe,state:ge})))})}function k(v){return v=v||gt(Vn)||O,($,F)=>M(v,$,F)}function D(v){const $=R[0];$&&(s({...v,replace:$.replace,scroll:$.scroll}),R.length=0)}function U(v,$){const F=Je(t(),v.pathname),ae=ee;ee="preload";for(let ze in F){const{route:ce,params:Ge}=F[ze];ce.component&&ce.component.preload&&ce.component.preload();const{preload:ge}=ce;$&&ge&&An(n(),()=>ge({params:Ge,location:{pathname:v.pathname,search:v.search,hash:v.hash,query:Bn(v),state:null,key:""},intent:"preload"}))}ee=ae}}function Ro(e,t,n,r){const{base:o,location:s,params:i}=e,{pattern:a,component:c,preload:l}=r().route,u=x(()=>r().path);c&&c.preload&&c.preload();const f=l?l({params:i,location:s,intent:ee||"initial"}):void 0;return{parent:t,pattern:a,path:u,outlet:()=>c?_(c,{params:i,location:s,data:f,get children(){return n()}}):n(),resolvePath(y){return Le(o.path(),y,u())}}}const Uo=e=>t=>{const{base:n}=t,r=Pn(()=>t.children),o=x(()=>Hn(r(),t.base||""));let s;const i=Io(e,o,()=>s,{base:n,singleFlight:t.singleFlight,transformUrl:t.transformUrl});return e.create&&e.create(i),_(xo.Provider,{value:i,get children(){return _(Fo,{routerState:i,get root(){return t.root},get preload(){return t.rootPreload||t.rootLoad},get children(){return[x(()=>(s=ht())&&null),_(Mo,{routerState:i,get branches(){return o()}})]}})}})};function Fo(e){const t=e.routerState.location,n=e.routerState.params,r=x(()=>e.preload&&N(()=>{e.preload({params:n,location:t,intent:Lo()||"initial"})}));return _(Ln,{get when(){return e.root},keyed:!0,get fallback(){return e.children},children:o=>_(o,{params:n,location:t,get data(){return r()},get children(){return e.children}})})}function Mo(e){const t=[];let n;const r=x(dt(e.routerState.matches,(o,s,i)=>{let a=s&&o.length===s.length;const c=[];for(let l=0,u=o.length;l<u;l++){const f=s&&s[l],d=o[l];i&&f&&d.route.key===f.route.key?c[l]=i[l]:(a=!1,t[l]&&t[l](),ft(y=>{t[l]=y,c[l]=Ro(e.routerState,c[l-1]||e.routerState.base,Gt(()=>r()[l+1]),()=>e.routerState.matches()[l])}))}return t.splice(o.length).forEach(l=>l()),i&&a?i:(n=c[0],c)}));return Gt(()=>r()&&n)()}const Gt=e=>()=>_(Ln,{get when(){return e()},keyed:!0,children:t=>_(Vn.Provider,{value:t,get children(){return t.outlet()}})});function No([e,t],n,r){return[e,o=>t(r(o))]}function Bo(e){let t=!1;const n=o=>typeof o=="string"?{value:o}:o,r=No(K(n(e.get()),{equals:(o,s)=>o.value===s.value&&o.state===s.state}),void 0,o=>(!t&&e.set(o),A.registry&&!A.done&&(A.done=!0),o));return e.init&&Te(e.init((o=e.get())=>{t=!0,r[1](n(o)),t=!1})),Uo({signal:r,create:e.create,utils:e.utils})}function ko(e,t,n){return e.addEventListener(t,n),()=>e.removeEventListener(t,n)}function Do(e,t){const n=e&&document.getElementById(e);n?n.scrollIntoView():t&&window.scrollTo(0,0)}const Vo=new Map;function qo(e=!0,t=!1,n="/_server",r){return o=>{const s=o.base.path(),i=o.navigatorFactory(o.base);let a,c;function l(p){return p.namespaceURI==="http://www.w3.org/2000/svg"}function u(p){if(p.defaultPrevented||p.button!==0||p.metaKey||p.altKey||p.ctrlKey||p.shiftKey)return;const g=p.composedPath().find(Q=>Q instanceof Node&&Q.nodeName.toUpperCase()==="A");if(!g||t&&!g.hasAttribute("link"))return;const b=l(g),S=b?g.href.baseVal:g.href;if((b?g.target.baseVal:g.target)||!S&&!g.hasAttribute("state"))return;const R=(g.getAttribute("rel")||"").split(/\s+/);if(g.hasAttribute("download")||R&&R.includes("external"))return;const B=b?new URL(S,document.baseURI):new URL(S);if(!(B.origin!==window.location.origin||s&&B.pathname&&!B.pathname.toLowerCase().startsWith(s.toLowerCase())))return[g,B]}function f(p){const g=u(p);if(!g)return;const[b,S]=g,I=o.parsePath(S.pathname+S.search+S.hash),R=b.getAttribute("state");p.preventDefault(),i(I,{resolve:!1,replace:b.hasAttribute("replace"),scroll:!b.hasAttribute("noscroll"),state:R?JSON.parse(R):void 0})}function d(p){const g=u(p);if(!g)return;const[b,S]=g;r&&(S.pathname=r(S.pathname)),o.preloadRoute(S,b.getAttribute("preload")!=="false")}function y(p){clearTimeout(a);const g=u(p);if(!g)return c=null;const[b,S]=g;c!==b&&(r&&(S.pathname=r(S.pathname)),a=setTimeout(()=>{o.preloadRoute(S,b.getAttribute("preload")!=="false"),c=b},20))}function w(p){if(p.defaultPrevented)return;let g=p.submitter&&p.submitter.hasAttribute("formaction")?p.submitter.getAttribute("formaction"):p.target.getAttribute("action");if(!g)return;if(!g.startsWith("https://action/")){const S=new URL(g,Nn);if(g=o.parsePath(S.pathname+S.search),!g.startsWith(n))return}if(p.target.method.toUpperCase()!=="POST")throw new Error("Only POST forms are supported for Actions");const b=Vo.get(g);if(b){p.preventDefault();const S=new FormData(p.target,p.submitter);b.call({r:o,f:p.target},p.target.enctype==="multipart/form-data"?S:new URLSearchParams(S))}}yt(["click","submit"]),document.addEventListener("click",f),e&&(document.addEventListener("mousemove",y,{passive:!0}),document.addEventListener("focusin",d,{passive:!0}),document.addEventListener("touchstart",d,{passive:!0})),document.addEventListener("submit",w),Te(()=>{document.removeEventListener("click",f),e&&(document.removeEventListener("mousemove",y),document.removeEventListener("focusin",d),document.removeEventListener("touchstart",d)),document.removeEventListener("submit",w)})}}function Ho(e){const t=()=>{const r=window.location.pathname.replace(/^\/+/,"/")+window.location.search,o=window.history.state&&window.history.state._depth&&Object.keys(window.history.state).length===1?void 0:window.history.state;return{value:r+window.location.hash,state:o}},n=Mn();return Bo({get:t,set({value:r,replace:o,scroll:s,state:i}){o?window.history.replaceState(vo(i),"",r):window.history.pushState(i,"",r),Do(decodeURIComponent(window.location.hash.slice(1)),s),bt()},init:r=>ko(window,"popstate",$o(r,o=>{if(o&&o<0)return!n.confirm(o);{const s=t();return!n.confirm(s.value,{state:s.state})}})),create:qo(e.preload,e.explicitLinks,e.actionBase,e.transformUrl),utils:{go:r=>window.history.go(r),beforeLeave:n}})(e)}const zo={base:"/_build".replace("/_build",""),resourceBaseURL:"http://localhost:3000"};/*! Capacitor: https://capacitorjs.com/ - MIT License */var fe;(function(e){e.Unimplemented="UNIMPLEMENTED",e.Unavailable="UNAVAILABLE"})(fe||(fe={}));class Ze extends Error{constructor(t,n,r){super(t),this.message=t,this.code=n,this.data=r}}const Go=e=>{var t,n;return e?.androidBridge?"android":!((n=(t=e?.webkit)===null||t===void 0?void 0:t.messageHandlers)===null||n===void 0)&&n.bridge?"ios":"web"},Ko=e=>{const t=e.CapacitorCustomPlatform||null,n=e.Capacitor||{},r=n.Plugins=n.Plugins||{},o=()=>t!==null?t.name:Go(e),s=()=>o()!=="web",i=f=>{const d=l.get(f);return!!(d?.platforms.has(o())||a(f))},a=f=>{var d;return(d=n.PluginHeaders)===null||d===void 0?void 0:d.find(y=>y.name===f)},c=f=>e.console.error(f),l=new Map,u=(f,d={})=>{const y=l.get(f);if(y)return console.warn(`Capacitor plugin "${f}" already registered. Cannot register plugins twice.`),y.proxy;const w=o(),p=a(f);let g;const b=async()=>(!g&&w in d?g=typeof d[w]=="function"?g=await d[w]():g=d[w]:t!==null&&!g&&"web"in d&&(g=typeof d.web=="function"?g=await d.web():g=d.web),g),S=(C,O)=>{var M,k;if(p){const D=p?.methods.find(U=>O===U.name);if(D)return D.rtype==="promise"?U=>n.nativePromise(f,O.toString(),U):(U,v)=>n.nativeCallback(f,O.toString(),U,v);if(C)return(M=C[O])===null||M===void 0?void 0:M.bind(C)}else{if(C)return(k=C[O])===null||k===void 0?void 0:k.bind(C);throw new Ze(`"${f}" plugin is not implemented on ${w}`,fe.Unimplemented)}},I=C=>{let O;const M=(...k)=>{const D=b().then(U=>{const v=S(U,C);if(v){const $=v(...k);return O=$?.remove,$}else throw new Ze(`"${f}.${C}()" is not implemented on ${w}`,fe.Unimplemented)});return C==="addListener"&&(D.remove=async()=>O()),D};return M.toString=()=>`${C.toString()}() { [capacitor code] }`,Object.defineProperty(M,"name",{value:C,writable:!1,configurable:!1}),M},R=I("addListener"),B=I("removeListener"),Q=(C,O)=>{const M=R({eventName:C},O),k=async()=>{const U=await M;B({eventName:C,callbackId:U},O)},D=new Promise(U=>M.then(()=>U({remove:k})));return D.remove=async()=>{console.warn("Using addListener() without 'await' is deprecated."),await k()},D},ie=new Proxy({},{get(C,O){switch(O){case"$$typeof":return;case"toJSON":return()=>({});case"addListener":return p?Q:R;case"removeListener":return B;default:return I(O)}}});return r[f]=ie,l.set(f,{name:f,proxy:ie,platforms:new Set([...Object.keys(d),...p?[w]:[]])}),ie};return n.convertFileSrc||(n.convertFileSrc=f=>f),n.getPlatform=o,n.handleError=c,n.isNativePlatform=s,n.isPluginAvailable=i,n.registerPlugin=u,n.Exception=Ze,n.DEBUG=!!n.DEBUG,n.isLoggingEnabled=!!n.isLoggingEnabled,n},Wo=e=>e.Capacitor=Ko(e),Fe=Wo(typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{}),wt=Fe.registerPlugin;class zn{constructor(){this.listeners={},this.retainedEventArguments={},this.windowListeners={}}addListener(t,n){let r=!1;this.listeners[t]||(this.listeners[t]=[],r=!0),this.listeners[t].push(n);const s=this.windowListeners[t];s&&!s.registered&&this.addWindowListener(s),r&&this.sendRetainedArgumentsForEvent(t);const i=async()=>this.removeListener(t,n);return Promise.resolve({remove:i})}async removeAllListeners(){this.listeners={};for(const t in this.windowListeners)this.removeWindowListener(this.windowListeners[t]);this.windowListeners={}}notifyListeners(t,n,r){const o=this.listeners[t];if(!o){if(r){let s=this.retainedEventArguments[t];s||(s=[]),s.push(n),this.retainedEventArguments[t]=s}return}o.forEach(s=>s(n))}hasListeners(t){return!!this.listeners[t].length}registerWindowListener(t,n){this.windowListeners[n]={registered:!1,windowEventName:t,pluginEventName:n,handler:r=>{this.notifyListeners(n,r)}}}unimplemented(t="not implemented"){return new Fe.Exception(t,fe.Unimplemented)}unavailable(t="not available"){return new Fe.Exception(t,fe.Unavailable)}async removeListener(t,n){const r=this.listeners[t];if(!r)return;const o=r.indexOf(n);this.listeners[t].splice(o,1),this.listeners[t].length||this.removeWindowListener(this.windowListeners[t])}addWindowListener(t){window.addEventListener(t.windowEventName,t.handler),t.registered=!0}removeWindowListener(t){t&&(window.removeEventListener(t.windowEventName,t.handler),t.registered=!1)}sendRetainedArgumentsForEvent(t){const n=this.retainedEventArguments[t];n&&(delete this.retainedEventArguments[t],n.forEach(r=>{this.notifyListeners(t,r)}))}}const Kt=e=>encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape),Wt=e=>e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent);class Xo extends zn{async getCookies(){const t=document.cookie,n={};return t.split(";").forEach(r=>{if(r.length<=0)return;let[o,s]=r.replace(/=/,"CAP_COOKIE").split("CAP_COOKIE");o=Wt(o).trim(),s=Wt(s).trim(),n[o]=s}),n}async setCookie(t){try{const n=Kt(t.key),r=Kt(t.value),o=`; expires=${(t.expires||"").replace("expires=","")}`,s=(t.path||"/").replace("path=",""),i=t.url!=null&&t.url.length>0?`domain=${t.url}`:"";document.cookie=`${n}=${r||""}${o}; path=${s}; ${i};`}catch(n){return Promise.reject(n)}}async deleteCookie(t){try{document.cookie=`${t.key}=; Max-Age=0`}catch(n){return Promise.reject(n)}}async clearCookies(){try{const t=document.cookie.split(";")||[];for(const n of t)document.cookie=n.replace(/^ +/,"").replace(/=.*/,`=;expires=${new Date().toUTCString()};path=/`)}catch(t){return Promise.reject(t)}}async clearAllCookies(){try{await this.clearCookies()}catch(t){return Promise.reject(t)}}}wt("CapacitorCookies",{web:()=>new Xo});const Jo=async e=>new Promise((t,n)=>{const r=new FileReader;r.onload=()=>{const o=r.result;t(o.indexOf(",")>=0?o.split(",")[1]:o)},r.onerror=o=>n(o),r.readAsDataURL(e)}),Zo=(e={})=>{const t=Object.keys(e);return Object.keys(e).map(o=>o.toLocaleLowerCase()).reduce((o,s,i)=>(o[s]=e[t[i]],o),{})},Yo=(e,t=!0)=>e?Object.entries(e).reduce((r,o)=>{const[s,i]=o;let a,c;return Array.isArray(i)?(c="",i.forEach(l=>{a=t?encodeURIComponent(l):l,c+=`${s}=${a}&`}),c.slice(0,-1)):(a=t?encodeURIComponent(i):i,c=`${s}=${a}`),`${r}&${c}`},"").substr(1):null,Qo=(e,t={})=>{const n=Object.assign({method:e.method||"GET",headers:e.headers},t),o=Zo(e.headers)["content-type"]||"";if(typeof e.data=="string")n.body=e.data;else if(o.includes("application/x-www-form-urlencoded")){const s=new URLSearchParams;for(const[i,a]of Object.entries(e.data||{}))s.set(i,a);n.body=s.toString()}else if(o.includes("multipart/form-data")||e.data instanceof FormData){const s=new FormData;if(e.data instanceof FormData)e.data.forEach((a,c)=>{s.append(c,a)});else for(const a of Object.keys(e.data))s.append(a,e.data[a]);n.body=s;const i=new Headers(n.headers);i.delete("content-type"),n.headers=i}else(o.includes("application/json")||typeof e.data=="object")&&(n.body=JSON.stringify(e.data));return n};class es extends zn{async request(t){const n=Qo(t,t.webFetchExtra),r=Yo(t.params,t.shouldEncodeUrlParams),o=r?`${t.url}?${r}`:t.url,s=await fetch(o,n),i=s.headers.get("content-type")||"";let{responseType:a="text"}=s.ok?t:{};i.includes("application/json")&&(a="json");let c,l;switch(a){case"arraybuffer":case"blob":l=await s.blob(),c=await Jo(l);break;case"json":c=await s.json();break;case"document":case"text":default:c=await s.text()}const u={};return s.headers.forEach((f,d)=>{u[d]=f}),{data:c,headers:u,status:s.status,url:s.url}}async get(t){return this.request(Object.assign(Object.assign({},t),{method:"GET"}))}async post(t){return this.request(Object.assign(Object.assign({},t),{method:"POST"}))}async put(t){return this.request(Object.assign(Object.assign({},t),{method:"PUT"}))}async patch(t){return this.request(Object.assign(Object.assign({},t),{method:"PATCH"}))}async delete(t){return this.request(Object.assign(Object.assign({},t),{method:"DELETE"}))}}wt("CapacitorHttp",{web:()=>new es});const ts=wt("Echo");var ns=Ee("<div>hello world <button id=ping>click me");const rs=()=>{const e=async()=>{const{value:t}=await ts.echo({value:"Hello plugin!"});console.log("ping",t)};return(()=>{var t=ns(),n=t.firstChild,r=n.nextSibling;return ke(t,os),De(t,()=>"production",r),r.$$click=e,t})()},os="Foo_f113vbgj";yt(["click"]);var ss=Ee("<div>Page 1");const is=()=>(()=>{var e=ss();return ke(e,as),e})(),as="Foo_fyedve3";var cs=Ee("<div>Page 2");const ls=()=>(()=>{var e=cs();return ke(e,us),e})(),us="Foo_fb4cw89",fs=[{path:"/",component:rs},{path:"/page1",component:is},{path:"/page2",component:ls}],ds=()=>null;var hs=Ee("<div class=content-container>");function Gn(){return _(yo,{get children(){return _(Ho,{get base(){return zo.base},root:e=>[_(bo,{children:"Test"}),_(wo,{name:"description",content:"test app"}),(()=>{var t=hs();return De(t,_(Nr,{get children(){return[_(ds,{}),x(()=>e.children)]}})),t})()],children:fs})}})}const gs=e=>null;var ps=Ee("<span style=font-size:1.5em;text-align:center;position:fixed;left:0px;bottom:55%;width:100%;>");const ys=e=>{const t="Error | Uncaught Client Exception";return _(Fr,{fallback:n=>(console.error(n),[(()=>{var r=ps();return De(r,t),r})(),_(gs,{code:500})]),get children(){return e.children}})};function Xt(e){return e.children}function ms(){return _(Xt,{get children(){return _(Xt,{get children(){return _(ys,{get children(){return _(Gn,{})}})}})}})}function bs(e,t){In(e,t)}const it=Fe.getPlatform()=="android";var Kn=typeof global=="object"&&global&&global.Object===Object&&global,ws=typeof self=="object"&&self&&self.Object===Object&&self,G=Kn||ws||Function("return this")(),z=G.Symbol,Wn=Object.prototype,vs=Wn.hasOwnProperty,$s=Wn.toString,pe=z?z.toStringTag:void 0;function Ss(e){var t=vs.call(e,pe),n=e[pe];try{e[pe]=void 0;var r=!0}catch{}var o=$s.call(e);return r&&(t?e[pe]=n:delete e[pe]),o}var Ts=Object.prototype,As=Ts.toString;function Ps(e){return As.call(e)}var Es="[object Null]",_s="[object Undefined]",Jt=z?z.toStringTag:void 0;function ne(e){return e==null?e===void 0?_s:Es:Jt&&Jt in Object(e)?Ss(e):Ps(e)}function re(e){return e!=null&&typeof e=="object"}var xs="[object Symbol]";function vt(e){return typeof e=="symbol"||re(e)&&ne(e)==xs}function Xn(e,t){for(var n=-1,r=e==null?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}var Z=Array.isArray,Zt=z?z.prototype:void 0,Yt=Zt?Zt.toString:void 0;function Jn(e){if(typeof e=="string")return e;if(Z(e))return Xn(e,Jn)+"";if(vt(e))return Yt?Yt.call(e):"";var t=e+"";return t=="0"&&1/e==-1/0?"-0":t}function xe(e){var t=typeof e;return e!=null&&(t=="object"||t=="function")}function Cs(e){return e}var Os="[object AsyncFunction]",js="[object Function]",Ls="[object GeneratorFunction]",Is="[object Proxy]";function Zn(e){if(!xe(e))return!1;var t=ne(e);return t==js||t==Ls||t==Os||t==Is}var Ye=G["__core-js_shared__"],Qt=function(){var e=/[^.]+$/.exec(Ye&&Ye.keys&&Ye.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function Rs(e){return!!Qt&&Qt in e}var Us=Function.prototype,Fs=Us.toString;function oe(e){if(e!=null){try{return Fs.call(e)}catch{}try{return e+""}catch{}}return""}var Ms=/[\\^$.*+?()[\]{}|]/g,Ns=/^\[object .+?Constructor\]$/,Bs=Function.prototype,ks=Object.prototype,Ds=Bs.toString,Vs=ks.hasOwnProperty,qs=RegExp("^"+Ds.call(Vs).replace(Ms,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function Hs(e){if(!xe(e)||Rs(e))return!1;var t=Zn(e)?qs:Ns;return t.test(oe(e))}function zs(e,t){return e?.[t]}function se(e,t){var n=zs(e,t);return Hs(n)?n:void 0}var at=se(G,"WeakMap"),en=Object.create,Gs=function(){function e(){}return function(t){if(!xe(t))return{};if(en)return en(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function Ks(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Ws(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}var Xs=800,Js=16,Zs=Date.now;function Ys(e){var t=0,n=0;return function(){var r=Zs(),o=Js-(r-n);if(n=r,o>0){if(++t>=Xs)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}function Qs(e){return function(){return e}}var Me=function(){try{var e=se(Object,"defineProperty");return e({},"",{}),e}catch{}}(),ei=Me?function(e,t){return Me(e,"toString",{configurable:!0,enumerable:!1,value:Qs(t),writable:!0})}:Cs,ti=Ys(ei);function ni(e,t){for(var n=-1,r=e==null?0:e.length;++n<r&&t(e[n],n,e)!==!1;);return e}var ri=9007199254740991,oi=/^(?:0|[1-9]\d*)$/;function si(e,t){var n=typeof e;return t=t??ri,!!t&&(n=="number"||n!="symbol"&&oi.test(e))&&e>-1&&e%1==0&&e<t}function Yn(e,t,n){t=="__proto__"&&Me?Me(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Qn(e,t){return e===t||e!==e&&t!==t}var ii=Object.prototype,ai=ii.hasOwnProperty;function er(e,t,n){var r=e[t];(!(ai.call(e,t)&&Qn(r,n))||n===void 0&&!(t in e))&&Yn(e,t,n)}function Ce(e,t,n,r){var o=!n;n||(n={});for(var s=-1,i=t.length;++s<i;){var a=t[s],c=void 0;c===void 0&&(c=e[a]),o?Yn(n,a,c):er(n,a,c)}return n}var tn=Math.max;function ci(e,t,n){return t=tn(t===void 0?e.length-1:t,0),function(){for(var r=arguments,o=-1,s=tn(r.length-t,0),i=Array(s);++o<s;)i[o]=r[t+o];o=-1;for(var a=Array(t+1);++o<t;)a[o]=r[o];return a[t]=n(i),Ks(e,this,a)}}var li=9007199254740991;function tr(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=li}function $t(e){return e!=null&&tr(e.length)&&!Zn(e)}var ui=Object.prototype;function Ve(e){var t=e&&e.constructor,n=typeof t=="function"&&t.prototype||ui;return e===n}function fi(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}var di="[object Arguments]";function nn(e){return re(e)&&ne(e)==di}var nr=Object.prototype,hi=nr.hasOwnProperty,gi=nr.propertyIsEnumerable,St=nn(function(){return arguments}())?nn:function(e){return re(e)&&hi.call(e,"callee")&&!gi.call(e,"callee")};function pi(){return!1}var rr=typeof exports=="object"&&exports&&!exports.nodeType&&exports,rn=rr&&typeof module=="object"&&module&&!module.nodeType&&module,yi=rn&&rn.exports===rr,on=yi?G.Buffer:void 0,mi=on?on.isBuffer:void 0,Tt=mi||pi,bi="[object Arguments]",wi="[object Array]",vi="[object Boolean]",$i="[object Date]",Si="[object Error]",Ti="[object Function]",Ai="[object Map]",Pi="[object Number]",Ei="[object Object]",_i="[object RegExp]",xi="[object Set]",Ci="[object String]",Oi="[object WeakMap]",ji="[object ArrayBuffer]",Li="[object DataView]",Ii="[object Float32Array]",Ri="[object Float64Array]",Ui="[object Int8Array]",Fi="[object Int16Array]",Mi="[object Int32Array]",Ni="[object Uint8Array]",Bi="[object Uint8ClampedArray]",ki="[object Uint16Array]",Di="[object Uint32Array]",E={};E[Ii]=E[Ri]=E[Ui]=E[Fi]=E[Mi]=E[Ni]=E[Bi]=E[ki]=E[Di]=!0;E[bi]=E[wi]=E[ji]=E[vi]=E[Li]=E[$i]=E[Si]=E[Ti]=E[Ai]=E[Pi]=E[Ei]=E[_i]=E[xi]=E[Ci]=E[Oi]=!1;function Vi(e){return re(e)&&tr(e.length)&&!!E[ne(e)]}function At(e){return function(t){return e(t)}}var or=typeof exports=="object"&&exports&&!exports.nodeType&&exports,be=or&&typeof module=="object"&&module&&!module.nodeType&&module,qi=be&&be.exports===or,Qe=qi&&Kn.process,de=function(){try{var e=be&&be.require&&be.require("util").types;return e||Qe&&Qe.binding&&Qe.binding("util")}catch{}}(),sn=de&&de.isTypedArray,sr=sn?At(sn):Vi,Hi=Object.prototype,zi=Hi.hasOwnProperty;function ir(e,t){var n=Z(e),r=!n&&St(e),o=!n&&!r&&Tt(e),s=!n&&!r&&!o&&sr(e),i=n||r||o||s,a=i?fi(e.length,String):[],c=a.length;for(var l in e)(t||zi.call(e,l))&&!(i&&(l=="length"||o&&(l=="offset"||l=="parent")||s&&(l=="buffer"||l=="byteLength"||l=="byteOffset")||si(l,c)))&&a.push(l);return a}function ar(e,t){return function(n){return e(t(n))}}var Gi=ar(Object.keys,Object),Ki=Object.prototype,Wi=Ki.hasOwnProperty;function cr(e){if(!Ve(e))return Gi(e);var t=[];for(var n in Object(e))Wi.call(e,n)&&n!="constructor"&&t.push(n);return t}function Pt(e){return $t(e)?ir(e):cr(e)}function Xi(e){var t=[];if(e!=null)for(var n in Object(e))t.push(n);return t}var Ji=Object.prototype,Zi=Ji.hasOwnProperty;function Yi(e){if(!xe(e))return Xi(e);var t=Ve(e),n=[];for(var r in e)r=="constructor"&&(t||!Zi.call(e,r))||n.push(r);return n}function Et(e){return $t(e)?ir(e,!0):Yi(e)}var Qi=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,ea=/^\w*$/;function ta(e,t){if(Z(e))return!1;var n=typeof e;return n=="number"||n=="symbol"||n=="boolean"||e==null||vt(e)?!0:ea.test(e)||!Qi.test(e)||t!=null&&e in Object(t)}var $e=se(Object,"create");function na(){this.__data__=$e?$e(null):{},this.size=0}function ra(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var oa="__lodash_hash_undefined__",sa=Object.prototype,ia=sa.hasOwnProperty;function aa(e){var t=this.__data__;if($e){var n=t[e];return n===oa?void 0:n}return ia.call(t,e)?t[e]:void 0}var ca=Object.prototype,la=ca.hasOwnProperty;function ua(e){var t=this.__data__;return $e?t[e]!==void 0:la.call(t,e)}var fa="__lodash_hash_undefined__";function da(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=$e&&t===void 0?fa:t,this}function te(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}te.prototype.clear=na;te.prototype.delete=ra;te.prototype.get=aa;te.prototype.has=ua;te.prototype.set=da;function ha(){this.__data__=[],this.size=0}function qe(e,t){for(var n=e.length;n--;)if(Qn(e[n][0],t))return n;return-1}var ga=Array.prototype,pa=ga.splice;function ya(e){var t=this.__data__,n=qe(t,e);if(n<0)return!1;var r=t.length-1;return n==r?t.pop():pa.call(t,n,1),--this.size,!0}function ma(e){var t=this.__data__,n=qe(t,e);return n<0?void 0:t[n][1]}function ba(e){return qe(this.__data__,e)>-1}function wa(e,t){var n=this.__data__,r=qe(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}function X(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}X.prototype.clear=ha;X.prototype.delete=ya;X.prototype.get=ma;X.prototype.has=ba;X.prototype.set=wa;var Se=se(G,"Map");function va(){this.size=0,this.__data__={hash:new te,map:new(Se||X),string:new te}}function $a(e){var t=typeof e;return t=="string"||t=="number"||t=="symbol"||t=="boolean"?e!=="__proto__":e===null}function He(e,t){var n=e.__data__;return $a(t)?n[typeof t=="string"?"string":"hash"]:n.map}function Sa(e){var t=He(this,e).delete(e);return this.size-=t?1:0,t}function Ta(e){return He(this,e).get(e)}function Aa(e){return He(this,e).has(e)}function Pa(e,t){var n=He(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}function Y(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Y.prototype.clear=va;Y.prototype.delete=Sa;Y.prototype.get=Ta;Y.prototype.has=Aa;Y.prototype.set=Pa;var Ea="Expected a function";function _t(e,t){if(typeof e!="function"||t!=null&&typeof t!="function")throw new TypeError(Ea);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],s=n.cache;if(s.has(o))return s.get(o);var i=e.apply(this,r);return n.cache=s.set(o,i)||s,i};return n.cache=new(_t.Cache||Y),n}_t.Cache=Y;var _a=500;function xa(e){var t=_t(e,function(r){return n.size===_a&&n.clear(),r}),n=t.cache;return t}var Ca=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Oa=/\\(\\)?/g,ja=xa(function(e){var t=[];return e.charCodeAt(0)===46&&t.push(""),e.replace(Ca,function(n,r,o,s){t.push(o?s.replace(Oa,"$1"):r||n)}),t});function La(e){return e==null?"":Jn(e)}function xt(e,t){return Z(e)?e:ta(e,t)?[e]:ja(La(e))}function lr(e){if(typeof e=="string"||vt(e))return e;var t=e+"";return t=="0"&&1/e==-1/0?"-0":t}function Ia(e,t){t=xt(t,e);for(var n=0,r=t.length;e!=null&&n<r;)e=e[lr(t[n++])];return n&&n==r?e:void 0}function Ct(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}var an=z?z.isConcatSpreadable:void 0;function Ra(e){return Z(e)||St(e)||!!(an&&e&&e[an])}function Ua(e,t,n,r,o){var s=-1,i=e.length;for(n||(n=Ra),o||(o=[]);++s<i;){var a=e[s];n(a)?Ct(o,a):o[o.length]=a}return o}function Fa(e){var t=e==null?0:e.length;return t?Ua(e):[]}function Ma(e){return ti(ci(e,void 0,Fa),e+"")}var Ot=ar(Object.getPrototypeOf,Object),Na="[object Object]",Ba=Function.prototype,ka=Object.prototype,ur=Ba.toString,Da=ka.hasOwnProperty,Va=ur.call(Object);function qa(e){if(!re(e)||ne(e)!=Na)return!1;var t=Ot(e);if(t===null)return!0;var n=Da.call(t,"constructor")&&t.constructor;return typeof n=="function"&&n instanceof n&&ur.call(n)==Va}function Ha(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),n=n>o?o:n,n<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var s=Array(o);++r<o;)s[r]=e[r+t];return s}function za(){this.__data__=new X,this.size=0}function Ga(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}function Ka(e){return this.__data__.get(e)}function Wa(e){return this.__data__.has(e)}var Xa=200;function Ja(e,t){var n=this.__data__;if(n instanceof X){var r=n.__data__;if(!Se||r.length<Xa-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Y(r)}return n.set(e,t),this.size=n.size,this}function he(e){var t=this.__data__=new X(e);this.size=t.size}he.prototype.clear=za;he.prototype.delete=Ga;he.prototype.get=Ka;he.prototype.has=Wa;he.prototype.set=Ja;function Za(e,t){return e&&Ce(t,Pt(t),e)}function Ya(e,t){return e&&Ce(t,Et(t),e)}var fr=typeof exports=="object"&&exports&&!exports.nodeType&&exports,cn=fr&&typeof module=="object"&&module&&!module.nodeType&&module,Qa=cn&&cn.exports===fr,ln=Qa?G.Buffer:void 0,un=ln?ln.allocUnsafe:void 0;function ec(e,t){if(t)return e.slice();var n=e.length,r=un?un(n):new e.constructor(n);return e.copy(r),r}function tc(e,t){for(var n=-1,r=e==null?0:e.length,o=0,s=[];++n<r;){var i=e[n];t(i,n,e)&&(s[o++]=i)}return s}function dr(){return[]}var nc=Object.prototype,rc=nc.propertyIsEnumerable,fn=Object.getOwnPropertySymbols,jt=fn?function(e){return e==null?[]:(e=Object(e),tc(fn(e),function(t){return rc.call(e,t)}))}:dr;function oc(e,t){return Ce(e,jt(e),t)}var sc=Object.getOwnPropertySymbols,hr=sc?function(e){for(var t=[];e;)Ct(t,jt(e)),e=Ot(e);return t}:dr;function ic(e,t){return Ce(e,hr(e),t)}function gr(e,t,n){var r=t(e);return Z(e)?r:Ct(r,n(e))}function ac(e){return gr(e,Pt,jt)}function pr(e){return gr(e,Et,hr)}var ct=se(G,"DataView"),lt=se(G,"Promise"),ut=se(G,"Set"),dn="[object Map]",cc="[object Object]",hn="[object Promise]",gn="[object Set]",pn="[object WeakMap]",yn="[object DataView]",lc=oe(ct),uc=oe(Se),fc=oe(lt),dc=oe(ut),hc=oe(at),V=ne;(ct&&V(new ct(new ArrayBuffer(1)))!=yn||Se&&V(new Se)!=dn||lt&&V(lt.resolve())!=hn||ut&&V(new ut)!=gn||at&&V(new at)!=pn)&&(V=function(e){var t=ne(e),n=t==cc?e.constructor:void 0,r=n?oe(n):"";if(r)switch(r){case lc:return yn;case uc:return dn;case fc:return hn;case dc:return gn;case hc:return pn}return t});var gc=Object.prototype,pc=gc.hasOwnProperty;function yc(e){var t=e.length,n=new e.constructor(t);return t&&typeof e[0]=="string"&&pc.call(e,"index")&&(n.index=e.index,n.input=e.input),n}var mn=G.Uint8Array;function Lt(e){var t=new e.constructor(e.byteLength);return new mn(t).set(new mn(e)),t}function mc(e,t){var n=t?Lt(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}var bc=/\w*$/;function wc(e){var t=new e.constructor(e.source,bc.exec(e));return t.lastIndex=e.lastIndex,t}var bn=z?z.prototype:void 0,wn=bn?bn.valueOf:void 0;function vc(e){return wn?Object(wn.call(e)):{}}function $c(e,t){var n=t?Lt(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}var Sc="[object Boolean]",Tc="[object Date]",Ac="[object Map]",Pc="[object Number]",Ec="[object RegExp]",_c="[object Set]",xc="[object String]",Cc="[object Symbol]",Oc="[object ArrayBuffer]",jc="[object DataView]",Lc="[object Float32Array]",Ic="[object Float64Array]",Rc="[object Int8Array]",Uc="[object Int16Array]",Fc="[object Int32Array]",Mc="[object Uint8Array]",Nc="[object Uint8ClampedArray]",Bc="[object Uint16Array]",kc="[object Uint32Array]";function Dc(e,t,n){var r=e.constructor;switch(t){case Oc:return Lt(e);case Sc:case Tc:return new r(+e);case jc:return mc(e,n);case Lc:case Ic:case Rc:case Uc:case Fc:case Mc:case Nc:case Bc:case kc:return $c(e,n);case Ac:return new r;case Pc:case xc:return new r(e);case Ec:return wc(e);case _c:return new r;case Cc:return vc(e)}}function Vc(e){return typeof e.constructor=="function"&&!Ve(e)?Gs(Ot(e)):{}}var qc="[object Map]";function Hc(e){return re(e)&&V(e)==qc}var vn=de&&de.isMap,zc=vn?At(vn):Hc,Gc="[object Set]";function Kc(e){return re(e)&&V(e)==Gc}var $n=de&&de.isSet,Wc=$n?At($n):Kc,Xc=1,Jc=2,Zc=4,yr="[object Arguments]",Yc="[object Array]",Qc="[object Boolean]",el="[object Date]",tl="[object Error]",mr="[object Function]",nl="[object GeneratorFunction]",rl="[object Map]",ol="[object Number]",br="[object Object]",sl="[object RegExp]",il="[object Set]",al="[object String]",cl="[object Symbol]",ll="[object WeakMap]",ul="[object ArrayBuffer]",fl="[object DataView]",dl="[object Float32Array]",hl="[object Float64Array]",gl="[object Int8Array]",pl="[object Int16Array]",yl="[object Int32Array]",ml="[object Uint8Array]",bl="[object Uint8ClampedArray]",wl="[object Uint16Array]",vl="[object Uint32Array]",P={};P[yr]=P[Yc]=P[ul]=P[fl]=P[Qc]=P[el]=P[dl]=P[hl]=P[gl]=P[pl]=P[yl]=P[rl]=P[ol]=P[br]=P[sl]=P[il]=P[al]=P[cl]=P[ml]=P[bl]=P[wl]=P[vl]=!0;P[tl]=P[mr]=P[ll]=!1;function Ie(e,t,n,r,o,s){var i,a=t&Xc,c=t&Jc,l=t&Zc;if(n&&(i=o?n(e,r,o,s):n(e)),i!==void 0)return i;if(!xe(e))return e;var u=Z(e);if(u){if(i=yc(e),!a)return Ws(e,i)}else{var f=V(e),d=f==mr||f==nl;if(Tt(e))return ec(e,a);if(f==br||f==yr||d&&!o){if(i=c||d?{}:Vc(e),!a)return c?ic(e,Ya(i,e)):oc(e,Za(i,e))}else{if(!P[f])return o?e:{};i=Dc(e,f,a)}}s||(s=new he);var y=s.get(e);if(y)return y;s.set(e,i),Wc(e)?e.forEach(function(g){i.add(Ie(g,t,n,g,e,s))}):zc(e)&&e.forEach(function(g,b){i.set(b,Ie(g,t,n,b,e,s))});var w=l?c?pr:ac:c?Et:Pt,p=u?void 0:w(e);return ni(p||e,function(g,b){p&&(b=g,g=e[b]),er(i,b,Ie(g,t,n,b,e,s))}),i}function $l(e){var t=e==null?0:e.length;return t?e[t-1]:void 0}function Sl(e,t){return t.length<2?e:Ia(e,Ha(t,0,-1))}var Tl="[object Map]",Al="[object Set]",Pl=Object.prototype,El=Pl.hasOwnProperty;function Sn(e){if(e==null)return!0;if($t(e)&&(Z(e)||typeof e=="string"||typeof e.splice=="function"||Tt(e)||sr(e)||St(e)))return!e.length;var t=V(e);if(t==Tl||t==Al)return!e.size;if(Ve(e))return!cr(e).length;for(var n in e)if(El.call(e,n))return!1;return!0}function _l(e,t){return t=xt(t,e),e=Sl(e,t),e==null||delete e[lr($l(t))]}function xl(e){return qa(e)?void 0:e}var Cl=1,Ol=2,jl=4,Ll=Ma(function(e,t){var n={};if(e==null)return n;var r=!1;t=Xn(t,function(s){return s=xt(s,e),r||(r=s.length>1),s}),Ce(e,pr(e),n),r&&(n=Ie(n,Cl|Ol|jl,xl));for(var o=t.length;o--;)_l(n,t[o]);return n});const Il={error:"red",warn:"yellow",info:"dodgerBlue",verbose:"grey"};class Rl{level;logBuffer;constructor(){this.logBuffer=[],this.level="info"}sendMessage(t){t.meta?.err&&(t.meta.err={name:t.meta.err.name,message:t.meta.err.message,stack:t.meta.err.stack?.split(`
`).slice(0,20).join(`
`)})}log(t,n,r,o={}){o.platform=it?"android":"web";const s=Ll(o,["platform","online"]);if(it){const a=`[${n.toUpperCase()}] ${t}: ${r}`;Sn(s)?console.log(a):console.log(a,JSON.stringify(s,null,4))}else{const a=`[${n.toUpperCase()}] %c${t}%c: ${r}`,c=[`color: ${Il[t]}`,"color: white"];Sn(s)?console.log(a,...c):console.log(a,...c,s)}const i={level:t,tag:n,message:r,meta:o};t=="error"||o.online===!0?(this.sendMessage(i),t=="error"&&(this.logBuffer=[])):this.pushLog(i)}pushLog(t){t.timestamp=new Date().toISOString(),this.logBuffer.push(t),this.logBuffer.length>50&&this.logBuffer.splice(0,1)}verbose(t,n,r){this.level=="verbose"&&this.log("verbose",t,n,r)}info(t,n,r){this.level!="verbose"&&this.level!="info"||this.log("info",t,n,r)}warn(t,n,r){this.level!="verbose"&&this.level!="info"&&this.level!="warn"||this.log("warn",t,n,r)}error(t,n,r){console.error(`[${t.toUpperCase()}] ${n}`,r),this.log("error",t,n,r)}verboseProfiler(){}}let wr;wr=new Rl;const Ul=wr;console.log("app started wooooooo");Ul.info("UI","woooooooooooooooooooooooooooooooo");it?In(()=>_(Gn,{}),document.getElementById("app")):bs(()=>_(ms,{}),document.getElementById("app"));const Ml=void 0;export{Ml as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
